@page "/workerprofiles/edit"

@using HelpingHands
@using Microsoft.EntityFrameworkCore

@inject HelpingHands.Data.HelpingHandsContext DB
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Worker Profile</h4>
<hr />
@if (profile is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="profile" OnValidSubmit="UpdateWorkerProfile" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <input type="hidden" name="profile.Id" value="@profile.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="profile.Name" class="form-control" />
                    <ValidationMessage For="() => profile.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="bio" class="form-label">Bio:</label>
                    <InputTextArea rows="10" id="bio" @bind-Value="profile.Bio" class="form-control" />
                    <ValidationMessage For="() => profile.Bio" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="handle" class="form-label">Handle:</label>
                    <InputText id="handle" @bind-Value="profile.Handle" class="form-control" />
                    <ValidationMessage For="() => profile.Handle" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Location:</label>
                    <InputText id="location" @bind-Value="profile.Location" class="form-control" />
                    <ValidationMessage For="() => profile.Location" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="tags" class="form-label">Tags:</label>
                    <InputText id="tags" @bind-Value="profile.Tags" class="form-control" />
                    <ValidationMessage For="() => profile.Tags" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/workerprofiles">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public WorkerProfile_CLASS? profile { get; set; }

    string tagsString = "tag";

    protected override async Task OnInitializedAsync()
    {
        profile ??= await DB.WorkerProfile_CLASS.FirstOrDefaultAsync(m => m.Id == Id);

        if (profile is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateWorkerProfile()
    {      
        DB.Attach(profile!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!WorkerProfile_CLASSExists(profile!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/workerprofiles");
    }

    bool WorkerProfile_CLASSExists(int id)
    {
        return DB.WorkerProfile_CLASS.Any(e => e.Id == id);
    }

}
